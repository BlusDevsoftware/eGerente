const { createClient } = require('@supabase/supabase-js');
require('dotenv').config();

// Configura√ß√£o do Supabase
const supabaseUrl = process.env.SUPABASE_URL;
const supabaseKey = process.env.SUPABASE_SERVICE_ROLE_KEY;

if (!supabaseUrl || !supabaseKey) {
    console.error('‚ùå Vari√°veis de ambiente SUPABASE_URL e SUPABASE_SERVICE_ROLE_KEY s√£o obrigat√≥rias');
    process.exit(1);
}

const supabase = createClient(supabaseUrl, supabaseKey);

async function migrateMotivoAglutinacao() {
    try {
        console.log('üöÄ Iniciando migra√ß√£o para adicionar coluna motivo_aglutinacao...');
        
        // 1. Adicionar a nova coluna
        console.log('üìù Adicionando coluna motivo_aglutinacao...');
        const { error: alterError } = await supabase.rpc('exec_sql', {
            sql: `
                ALTER TABLE movimento_comissoes 
                ADD COLUMN IF NOT EXISTS motivo_aglutinacao TEXT;
            `
        });
        
        if (alterError) {
            console.error('‚ùå Erro ao adicionar coluna:', alterError);
            throw alterError;
        }
        
        console.log('‚úÖ Coluna motivo_aglutinacao adicionada com sucesso');
        
        // 2. Adicionar coment√°rio
        console.log('üìù Adicionando coment√°rio na coluna...');
        const { error: commentError } = await supabase.rpc('exec_sql', {
            sql: `
                COMMENT ON COLUMN movimento_comissoes.motivo_aglutinacao IS 'Motivo espec√≠fico da aglutina√ß√£o de t√≠tulos - separado das observa√ß√µes de pagamento';
            `
        });
        
        if (commentError) {
            console.warn('‚ö†Ô∏è Aviso: N√£o foi poss√≠vel adicionar coment√°rio (pode n√£o ser suportado):', commentError.message);
        } else {
            console.log('‚úÖ Coment√°rio adicionado com sucesso');
        }
        
        // 3. Criar √≠ndice
        console.log('üìù Criando √≠ndice para performance...');
        const { error: indexError } = await supabase.rpc('exec_sql', {
            sql: `
                CREATE INDEX IF NOT EXISTS idx_movimento_comissoes_motivo_aglutinacao 
                ON movimento_comissoes(motivo_aglutinacao);
            `
        });
        
        if (indexError) {
            console.warn('‚ö†Ô∏è Aviso: N√£o foi poss√≠vel criar √≠ndice (pode j√° existir):', indexError.message);
        } else {
            console.log('‚úÖ √çndice criado com sucesso');
        }
        
        // 4. Migrar dados existentes
        console.log('üìù Migrando dados existentes...');
        const { error: migrateError } = await supabase.rpc('exec_sql', {
            sql: `
                UPDATE movimento_comissoes 
                SET motivo_aglutinacao = observacoes 
                WHERE tipo_aglutinacao = 'AGL-PS' 
                  AND observacoes IS NOT NULL 
                  AND observacoes != ''
                  AND motivo_aglutinacao IS NULL;
            `
        });
        
        if (migrateError) {
            console.warn('‚ö†Ô∏è Aviso: N√£o foi poss√≠vel migrar dados existentes:', migrateError.message);
        } else {
            console.log('‚úÖ Dados existentes migrados com sucesso');
        }
        
        // 5. Verificar resultado
        console.log('üîç Verificando resultado da migra√ß√£o...');
        const { data: checkData, error: checkError } = await supabase
            .from('movimento_comissoes')
            .select('id, numero_titulo, tipo_aglutinacao, motivo_aglutinacao, observacoes')
            .eq('tipo_aglutinacao', 'AGL-PS')
            .limit(5);
        
        if (checkError) {
            console.warn('‚ö†Ô∏è Aviso: N√£o foi poss√≠vel verificar dados:', checkError.message);
        } else {
            console.log('üìä Dados de verifica√ß√£o:');
            checkData.forEach(titulo => {
                console.log(`  - ID ${titulo.id}: ${titulo.numero_titulo} | Motivo: ${titulo.motivo_aglutinacao || 'N/A'} | Obs: ${titulo.observacoes || 'N/A'}`);
            });
        }
        
        console.log('üéâ Migra√ß√£o conclu√≠da com sucesso!');
        console.log('üìã Resumo:');
        console.log('  ‚úÖ Coluna motivo_aglutinacao adicionada');
        console.log('  ‚úÖ Coment√°rio adicionado (se suportado)');
        console.log('  ‚úÖ √çndice criado (se suportado)');
        console.log('  ‚úÖ Dados existentes migrados');
        console.log('');
        console.log('üí° Pr√≥ximos passos:');
        console.log('  1. Reiniciar o backend para usar a nova coluna');
        console.log('  2. Testar a funcionalidade de aglutina√ß√£o');
        console.log('  3. Verificar se os motivos est√£o sendo salvos corretamente');
        
    } catch (error) {
        console.error('‚ùå Erro durante a migra√ß√£o:', error);
        process.exit(1);
    }
}

// Executar migra√ß√£o
migrateMotivoAglutinacao();
